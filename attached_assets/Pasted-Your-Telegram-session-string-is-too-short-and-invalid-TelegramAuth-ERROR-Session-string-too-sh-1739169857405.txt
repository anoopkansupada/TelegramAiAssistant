Your Telegram session string is too short and invalid:

[TelegramAuth] [ERROR] Session string too short
[TelegramAuth] [ERROR] Invalid session string format

This means that the Telegram session is not being saved correctly or that the session file (telegram.session.json) is corrupt.

✅ Step-by-Step Fix

1️⃣ Delete the Corrupted Session File

Run this in your Replit terminal:

rm telegram.session.json

This will remove any broken session.

2️⃣ Manually Authenticate Telegram

Since npx gramjs-cli was not installed before, let’s use GramJS correctly.

Install GramJS (if not installed)

npm install telegram

Authenticate Telegram

npx tsx

This will open an interactive shell. Then, manually authenticate:

import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";
import input from "input"; // npm install input if needed

const apiId = 123456; // Replace with your API ID
const apiHash = "your_api_hash"; // Replace with your API Hash
const session = new StringSession(""); // Start with an empty session

const client = new TelegramClient(session, apiId, apiHash, { connectionRetries: 5 });

(async () => {
    await client.start({
        phoneNumber: async () => await input.text("Enter your phone number: "),
        password: async () => await input.text("Enter your password: "),
        phoneCode: async () => await input.text("Enter the OTP from Telegram: "),
        onError: (err) => console.log("[ERROR] Telegram authentication failed:", err),
    });

    console.log("Session saved:", client.session.save());

    // Save the session to a file
    require("fs").writeFileSync("telegram.session.json", client.session.save());
})();

Steps:
	1.	Run the code inside npx tsx.
	2.	Enter:
	•	Your phone number.
	•	The OTP from Telegram.
	•	(If asked) Your Telegram password.
	3.	If successful, it will print:

Session saved: 1A2B3C4D5E...

3️⃣ Verify the Session File

Run:

ls -la | grep telegram

Expected output:

-rw-r--r--  1 user user  500 telegram.session.json

4️⃣ Modify Your Code to Load the Session Correctly

If the session is still not loading, update server/index.ts:

🔹 Replace This:

const sessionString = process.env.TELEGRAM_SESSION || "";
const client = new TelegramClient(new StringSession(sessionString), apiId, apiHash);

✅ With This (Fixes Session Loading)

import fs from "fs";
import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";
import dotenv from "dotenv";

dotenv.config();

const apiId = parseInt(process.env.TELEGRAM_API_ID || "0");
const apiHash = process.env.TELEGRAM_API_HASH || "";
const sessionFilePath = "./telegram.session.json";

// ✅ Load session string from file (fixes empty session issue)
const sessionString = fs.existsSync(sessionFilePath) ? fs.readFileSync(sessionFilePath, "utf8").trim() : "";
const client = new TelegramClient(new StringSession(sessionString), apiId, apiHash, {
    connectionRetries: 5,
});

(async () => {
    try {
        if (!sessionString) {
            console.log("[TelegramAuth] No session found, starting login process...");
            await client.start({
                phoneNumber: async () => process.env.TELEGRAM_PHONE_NUMBER,
                password: async () => process.env.TELEGRAM_PASSWORD,
                phoneCode: async () => {
                    console.log("Enter the OTP from Telegram:");
                    return new Promise(resolve => {
                        process.stdin.once("data", data => resolve(data.toString().trim()));
                    });
                },
                onError: (err) => console.error("[TelegramAuth] ❌ Error:", err),
            });

            // ✅ Save the session after successful login
            fs.writeFileSync(sessionFilePath, client.session.save());
            console.log("[TelegramAuth] ✅ Session saved successfully!");
        } else {
            console.log("[TelegramAuth] ✅ Using existing session.");
        }

        console.log("[TelegramAuth] ✅ Successfully logged into Telegram!");
    } catch (error) {
        console.error("[TelegramAuth] ❌ Failed to log in:", error);
    }
})();

5️⃣ Restart Your Server

After following all steps, restart:

npx tsx server/index.ts

If successful, you should see:

[TelegramAuth] ✅ Using existing session.
[TelegramAuth] ✅ Successfully logged into Telegram!

🚀 Next Steps
	1.	Delete the corrupt session (rm telegram.session.json).
	2.	Re-authenticate manually in npx tsx.
	3.	Verify the session file exists (ls -la | grep telegram).
	4.	Update your code to correctly load the session.
	5.	Restart your server (npx tsx server/index.ts).

Let me know how it goes! 🚀